// JavaScript para la p√°gina de publicidad (Versi√≥n Fusionada - Base: CORREGIDO ENV√çO + Slider Funcional)

document.addEventListener('DOMContentLoaded', function() {
    // --- Elementos del DOM (Combinados y verificados) ---
    const backendApiUrl = window.API_ENDPOINTS?.publicidad; // URL para cargar/enviar anuncios
    // ¬°IMPORTANTE! La URL para 'like' probablemente sea diferente (ej: window.API_ENDPOINTS?.like)
    // La funci√≥n darLike actual usa backendApiUrl y fallar√° o necesitar√° ajuste.

    if (!backendApiUrl) {
        console.error("‚ùå Error cr√≠tico: window.API_ENDPOINTS.publicidad no est√° definido. Verifica config.js.");
        alert("Error de configuraci√≥n. No se puede comunicar con el backend para cargar/registrar anuncios.");
        // Deshabilitar funcionalidad que dependa del backend aqu√≠ si es necesario
    }

    const registrarBtn = document.getElementById('registrar-publicidad');
    const cancelarBtn = document.getElementById('cancelar-registro'); // Para cerrar modal
    const formularioContainer = document.getElementById('formulario-container'); // Contenedor modal
    const formulario = document.getElementById('formulario-publicidad'); // Formulario en s√≠
    const anunciosContainer = document.querySelector('.anuncios-container'); // Donde se muestran los anuncios
    const modalCerrarBtn = document.getElementById('btn-cerrar'); // Bot√≥n 'X' del modal (si existe)

    // --- Elementos del Slider (Verificados) ---
    const slides = document.querySelectorAll('.slide');
    const navLinks = document.querySelectorAll('.slider-nav a'); // Enlaces de navegaci√≥n (ej: 1, 2, 3)
    const prevButton = document.querySelector('.prev-slide'); // Bot√≥n Anterior
    const nextButton = document.querySelector('.next-slide'); // Bot√≥n Siguiente

    // Variable para mantener el √≠ndice del slide actual
    let currentSlide = 0;

    // Ocultar formulario modal al inicio
    if (formularioContainer) {
        formularioContainer.style.display = 'none';
    } else {
        console.warn("‚ö†Ô∏è Contenedor del formulario ('formulario-container') no encontrado.");
    }

    // --- Funciones de Autenticaci√≥n y Modal (Base: Versi√≥n 1 - Corregida) ---

    // Verificar si el usuario est√° autenticado (localStorage) y configurar bot√≥n registro
    function configurarBotonRegistro() {
        const registrarBtn = document.getElementById('registrar-publicidad');
        if (registrarBtn) {
            const isUserAuth = localStorage.getItem("afiliado") === "yes";
            const isProfileComplete = localStorage.getItem("perfil_completo") === "true";
            console.log("üîß configurarBotonRegistro: Verificando estado (localStorage):");
            console.log(`   - afiliado: ${localStorage.getItem("afiliado")}, perfil_completo: ${localStorage.getItem("perfil_completo")}`);
            // Considerar si 'cedula' es un requisito estricto adicional
            // const hasCedula = localStorage.getItem("cedula") !== null;
            const isAuthenticated = isUserAuth || isProfileComplete; // L√≥gica mantenida de v1

            // Limpiar listeners previos para evitar duplicados
            registrarBtn.removeEventListener('click', mostrarFormularioRegistro);
            registrarBtn.removeEventListener('click', mostrarMensajeAutenticacion);

            if (!isAuthenticated) {
                registrarBtn.classList.add('boton-deshabilitado');
                registrarBtn.disabled = true;
                registrarBtn.title = "Debes ser afiliado al sindicato para registrar publicidad";
                registrarBtn.innerHTML = "Registrar Publicidad (Solo Afiliados)";
                registrarBtn.addEventListener('click', mostrarMensajeAutenticacion); // Asigna listener de alerta
                console.log("üîí Bot√≥n de registro deshabilitado (localStorage).");
            } else {
                registrarBtn.classList.remove('boton-deshabilitado');
                registrarBtn.disabled = false;
                registrarBtn.innerHTML = "Registrar Publicidad";
                registrarBtn.title = ""; // Limpiar tooltip
                registrarBtn.addEventListener('click', mostrarFormularioRegistro); // Asigna listener de mostrar form
                console.log("üîì Bot√≥n de registro habilitado (localStorage).");
            }
        } else {
            console.error("‚ùå Bot√≥n de registro ('registrar-publicidad') no encontrado.");
        }
    }

    // Muestra el modal del formulario
    function mostrarFormularioRegistro(e) {
        e.preventDefault(); // Prevenir comportamiento por defecto del bot√≥n/enlace
        console.log("üìù Mostrando formulario modal...");
        if (formularioContainer) {
            limpiarFormulario(); // Limpiar antes de mostrar
            configurarBotonesEmail(); // Reconfigurar botones de email cada vez que se abre
            formularioContainer.style.display = 'block'; // Mostrar el modal
        } else {
            console.error("‚ùå Contenedor del formulario ('formulario-container') no encontrado al intentar mostrar.");
        }
    }

    // Muestra alerta si se intenta registrar sin ser afiliado/perfil completo
    function mostrarMensajeAutenticacion(e) {
        e.preventDefault();
        console.log("‚ö†Ô∏è Intento de registro sin autenticaci√≥n (localStorage).");
        alert("Debes ser afiliado al sindicato para registrar publicidad. Por favor, accede desde la p√°gina principal o completa tu perfil.");
        return false;
    }

    // Cierra el modal del formulario
    function cerrarModalFormulario() {
        if (formularioContainer) {
            formularioContainer.style.display = 'none';
        }
    }

    // Configura los listeners para cerrar el modal (Bot√≥n X y Cancelar)
    function setupModalCloseListeners() {
        if (modalCerrarBtn) {
            modalCerrarBtn.addEventListener('click', cerrarModalFormulario);
        } else {
             console.warn("‚ö†Ô∏è Bot√≥n de cierre del modal ('btn-cerrar') no encontrado.");
        }
        if (cancelarBtn) {
            cancelarBtn.addEventListener('click', cerrarModalFormulario);
        } else {
            console.warn("‚ö†Ô∏è Bot√≥n de cancelar registro ('cancelar-registro') no encontrado.");
        }
        // Opcional: cerrar al hacer clic fuera del modal
        // window.addEventListener('click', (event) => {
        //     if (event.target === formularioContainer) {
        //         cerrarModalFormulario();
        //     }
        // });
    }


    // --- Funciones del Slider (Base: Versi√≥n 1 - Funcionalidad Confirmada) ---

    /**
     * Actualiza el slide visible y los indicadores de navegaci√≥n.
     * @param {number} slideIndex - El √≠ndice del slide a mostrar (0-based).
     */
    function updateSlide(slideIndex) {
        if (slides.length === 0) {
            console.warn("‚ö†Ô∏è No se encontraron elementos '.slide' para el slider.");
            return;
        }

        // Asegurar que el √≠ndice est√© dentro de los l√≠mites [0, slides.length - 1]
        // Forma concisa usando m√≥dulo:
        currentSlide = (slideIndex + slides.length) % slides.length;
        // Forma expl√≠cita:
        // if (slideIndex < 0) {
        //     currentSlide = slides.length - 1;
        // } else if (slideIndex >= slides.length) {
        //     currentSlide = 0;
        // } else {
        //     currentSlide = slideIndex;
        // }
        console.log(`üîÑ Actualizando al slide √≠ndice: ${currentSlide}`);

        // Ocultar todos los slides y mostrar solo el activo
        slides.forEach((slide, index) => {
            if (index === currentSlide) {
                slide.classList.add('active');
            } else {
                slide.classList.remove('active');
            }
        });

        // Actualizar los enlaces/puntos de navegaci√≥n
        updateNavLinks(currentSlide);
        updateSliderDots(); // Aunque est√© vac√≠a, la llamamos por si se implementa en el futuro
    }

    /**
     * Actualiza el estado visual (clase 'active') de los enlaces de navegaci√≥n del slider.
     * @param {number} activeIndex - El √≠ndice del slide actualmente activo (0-based).
     */
    function updateNavLinks(activeIndex) {
        if (navLinks.length === 0) return; // No hacer nada si no hay enlaces

        navLinks.forEach(link => {
            link.classList.remove('active');
            // Los data-slide suelen ser 1-based, comparamos con activeIndex + 1
            const slideNumber = parseInt(link.getAttribute('data-slide'));
            if (slideNumber === activeIndex + 1) {
                link.classList.add('active');
            }
        });
    }

    /**
     * Configura los event listeners para la navegaci√≥n del slider (botones prev/next y enlaces).
     */
    function setupSliderNavListeners() {
        // Configurar los enlaces de navegaci√≥n (ej: 1, 2, 3)
        navLinks.forEach(link => {
            link.addEventListener('click', function(event) {
                event.preventDefault();
                const slideIndex = parseInt(this.getAttribute('data-slide')) - 1; // Convertir a 0-based
                if (!isNaN(slideIndex)) {
                    updateSlide(slideIndex);
                }
            });
        });

        // Configurar los botones de navegaci√≥n prev/next
        if (prevButton) {
            prevButton.addEventListener('click', function(event) {
                event.preventDefault(); // Prevenir si son enlaces <a>
                updateSlide(currentSlide - 1);
            });
        } else {
             console.warn("‚ö†Ô∏è Bot√≥n 'prev-slide' no encontrado.");
        }

        if (nextButton) {
            nextButton.addEventListener('click', function(event) {
                event.preventDefault(); // Prevenir si son enlaces <a>
                updateSlide(currentSlide + 1);
            });
        } else {
             console.warn("‚ö†Ô∏è Bot√≥n 'next-slide' no encontrado.");
        }
    }

    /**
     * Actualiza los puntos/dots de navegaci√≥n del slider (si existieran).
     * Esta funci√≥n se mantiene vac√≠a si los dots est√°n ocultos o no implementados.
     * Si se a√±aden dots en HTML/CSS, aqu√≠ ir√≠a la l√≥gica para marcar el activo.
     */
    function updateSliderDots() {
        // console.log("‚ö™ updateSliderDots: No implementado (dots ocultos/inexistentes).");
        // Ejemplo si hubiera dots:
        // const dots = document.querySelectorAll('.slider-dot');
        // if (dots.length > 0) {
        //     dots.forEach((dot, index) => {
        //         dot.classList.toggle('active', index === currentSlide);
        //     });
        // }
        return; // No hacer nada por ahora
    }


    // --- Funciones del Formulario (Base: Versi√≥n 1 - CORREGIDO ENV√çO) ---

    // Configura la l√≥gica de los botones para usar email del perfil o uno diferente
    function configurarBotonesEmail() {
        const btnEmailPerfil = document.getElementById('usar-email-perfil');
        const btnEmailDiferente = document.getElementById('usar-email-diferente');
        const emailInput = document.getElementById('email');

        if (btnEmailPerfil && btnEmailDiferente && emailInput) {
            const emailGuardado = localStorage.getItem("email");

            // Limpiar listeners previos clonando y reemplazando los botones
            // Esto es importante si la funci√≥n se llama m√∫ltiples veces (ej, al abrir modal)
            const newBtnEmailPerfil = btnEmailPerfil.cloneNode(true);
            const newBtnEmailDiferente = btnEmailDiferente.cloneNode(true);
            btnEmailPerfil.parentNode.replaceChild(newBtnEmailPerfil, btnEmailPerfil);
            btnEmailDiferente.parentNode.replaceChild(newBtnEmailDiferente, btnEmailDiferente);

            // L√≥gica inicial de visibilidad y valor
            if (emailGuardado) {
                emailInput.value = emailGuardado;
                emailInput.readOnly = false; // Permitir editar por si acaso
                newBtnEmailDiferente.style.display = 'inline-block'; // Mostrar "Usar otro"
                newBtnEmailPerfil.style.display = 'none'; // Ocultar "Usar perfil" (ya est√° puesto)
            } else {
                emailInput.value = '';
                emailInput.readOnly = false;
                newBtnEmailDiferente.style.display = 'none'; // Ocultar "Usar otro"
                newBtnEmailPerfil.style.display = 'none'; // Ocultar "Usar perfil" (no hay)
            }

            // A√±adir listeners a los NUEVOS botones
            newBtnEmailPerfil.addEventListener('click', function() {
                const emailPerfil = localStorage.getItem("email");
                if (emailPerfil) {
                    emailInput.value = emailPerfil;
                    newBtnEmailDiferente.style.display = 'inline-block';
                    newBtnEmailPerfil.style.display = 'none';
                } else {
                    alert("No tienes un email guardado en tu perfil. Por favor, actualiza tu perfil primero.");
                    emailInput.focus();
                }
            });

            newBtnEmailDiferente.addEventListener('click', function() {
                emailInput.value = '';
                emailInput.readOnly = false;
                emailInput.focus();
                // Mostrar "Usar perfil" solo si existe un email guardado
                newBtnEmailPerfil.style.display = localStorage.getItem("email") ? 'inline-block' : 'none';
                newBtnEmailDiferente.style.display = 'none';
            });
        } else {
             console.warn("‚ö†Ô∏è No se encontraron todos los elementos para configurar botones de email (usar-email-perfil, usar-email-diferente, email).");
        }
    }

    /**
     * Limpia los campos del formulario y la vista previa de la imagen.
     */
    function limpiarFormulario() {
        const formToReset = document.getElementById('formulario-publicidad');
        if (formToReset) {
            formToReset.reset(); // Resetea campos a sus valores por defecto HTML
            // Limpiar espec√≠ficamente campos que reset() podr√≠a no vaciar bien
            const emailInput = document.getElementById('email');
            const telefonoInput = document.getElementById('telefono');
            if(emailInput) emailInput.value = '';
            if(telefonoInput) telefonoInput.value = '';

            // Limpiar la vista previa de la imagen (si existe)
            const previewContainer = document.getElementById('imagen-preview-container');
            const placeholder = document.querySelector('.imagen-placeholder'); // Asumiendo que existe
            if (previewContainer) previewContainer.innerHTML = ''; // Limpiar contenedor
            if (placeholder) placeholder.style.display = 'block'; // Mostrar placeholder de nuevo
             // Resetear tambi√©n el input file mismo
            const imagenInput = document.getElementById('imagen');
            if (imagenInput) imagenInput.value = null;

             console.log("üßπ Formulario limpiado.");
             // Reconfigurar botones de email por si el localStorage cambi√≥ mientras estaba abierto
             // configurarBotonesEmail(); // Opcional, depende de si quieres que se actualice al limpiar
        } else {
             console.warn("‚ö†Ô∏è Formulario ('formulario-publicidad') no encontrado al intentar limpiar.");
        }
    }

    /**
     * Lee un archivo de imagen y devuelve una promesa que resuelve con la cadena Base64 (Data URL).
     * @param {File} file - El archivo de imagen.
     * @returns {Promise<string>} - Promesa con el Data URL Base64.
     */
    function leerImagenComoBase64(file) {
        return new Promise((resolve, reject) => {
            if (!file) {
                return reject(new Error('No se proporcion√≥ archivo.'));
            }
            // Validaci√≥n de tipo y tama√±o
            if (!file.type.startsWith('image/')) {
                return reject(new Error('El archivo seleccionado no es una imagen v√°lida.'));
            }
            const maxSizeMB = 5; // Aumentado a 5MB como ejemplo
            if (file.size > maxSizeMB * 1024 * 1024) {
                 return reject(new Error(`La imagen supera el tama√±o m√°ximo de ${maxSizeMB}MB.`));
            }

            const reader = new FileReader();
            reader.onload = (e) => resolve(e.target.result); // Resuelve con el Data URL
            reader.onerror = (error) => reject(new Error("Error al leer el archivo: " + error));
            reader.readAsDataURL(file); // Inicia la lectura
        });
    }

    /**
     * A√±ade el listener para el env√≠o del formulario. Prepara y env√≠a los datos al backend.
     */
    function inicializarFormularioPublicidad() {
        if (!formulario) {
            console.error('‚ùå Formulario ("formulario-publicidad") no encontrado. No se puede inicializar.');
            return;
        }

        formulario.addEventListener('submit', async (event) => {
            event.preventDefault(); // Prevenir env√≠o HTML normal
            console.log('üì® Formulario enviado. Procesando...');

            const submitBtn = document.getElementById('btn-guardar'); // Bot√≥n de Guardar/Enviar
            const originalBtnText = submitBtn?.innerHTML || "Guardar Publicidad";
            if(submitBtn) {
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando...';
                submitBtn.disabled = true;
            }

            // Remover mensajes previos de √©xito/error
            const prevMsg = formularioContainer?.querySelector('.mensaje-temporal');
            if(prevMsg) prevMsg.remove();

            try {
                // 1. Validar Autenticaci√≥n (localStorage) ANTES de procesar
                const isUserAuth = localStorage.getItem("afiliado") === "yes";
                const isProfileComplete = localStorage.getItem("perfil_completo") === "true";
                 if (!isUserAuth && !isProfileComplete) {
                    alert("Debes ser un afiliado para registrar publicidad.");
                    throw new Error("Intento de env√≠o sin autenticaci√≥n (localStorage)");
                 }

                // 2. Recolectar Datos del Formulario
                const formData = new FormData(formulario);
                const nombreUsuario = localStorage.getItem("nombre") || 'Afiliado'; // Tomar de localStorage
                const emailContacto = formData.get('email')?.trim();
                const telefonoContacto = formData.get('telefono')?.trim();
                const categoria = formData.get('categoria');
                const titulo = formData.get('titulo')?.trim();
                const descripcion = formData.get('descripcion')?.trim();

                // 3. Validaci√≥n de Campos Requeridos (Frontend)
                 if (!titulo || !descripcion || !emailContacto || !categoria) {
                    alert("Por favor, completa todos los campos obligatorios: T√≠tulo, Descripci√≥n, Categor√≠a y Email de contacto.");
                    throw new Error("Campos obligatorios faltantes");
                 }
                 // Validaci√≥n simple de email (opcional)
                 if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(emailContacto)) {
                    alert("Por favor, introduce un email de contacto v√°lido.");
                    throw new Error("Email inv√°lido");
                 }

                // 4. Preparar Objeto de Datos para el Backend (estructura de v1 corregida)
                const datosParaEnviar = {
                    nombre: nombreUsuario,
                    contacto: {
                        email: emailContacto,
                        telefono: telefonoContacto || null // Enviar null si est√° vac√≠o
                    },
                    categoria: categoria,
                    titulo: titulo,
                    descripcion: descripcion,
                    imagen_base64: null // Inicializar
                };

                // 5. Procesar Imagen (si existe)
                const imagenInput = document.getElementById('imagen');
                if (imagenInput?.files?.[0]) {
                    try {
                        datosParaEnviar.imagen_base64 = await leerImagenComoBase64(imagenInput.files[0]);
                        console.log("üñºÔ∏è Imagen procesada a Base64.");
                    } catch (imgError) {
                        console.error("Error procesando imagen:", imgError);
                        alert(`Error al procesar la imagen: ${imgError.message}. Intenta sin imagen o con otra.`);
                        throw imgError; // Relanzar para que lo capture el catch principal
                    }
                }

                // 6. Enviar Datos al Backend
                console.log("‚û°Ô∏è Datos a enviar:", datosParaEnviar);
                if (!backendApiUrl) throw new Error("URL del backend no configurada.");

                await enviarPublicidadBackend(datosParaEnviar, backendApiUrl);

                // 7. √âxito (si enviarPublicidadBackend no lanz√≥ error)
                mostrarMensajeExito("¬°Solicitud enviada! Tu anuncio est√° pendiente de aprobaci√≥n.");
                cerrarModalFormulario(); // Cerrar modal en √©xito

            } catch (error) {
                console.error('üö® Error durante el procesamiento/env√≠o del formulario:', error);
                // Mostrar mensaje de error si no es una de las validaciones ya alertadas
                if (error.message !== "Intento de env√≠o sin autenticaci√≥n (localStorage)" &&
                    error.message !== "Campos obligatorios faltantes" &&
                    error.message !== "Email inv√°lido" &&
                    !error.message.startsWith("La imagen supera"))
                {
                     mostrarMensajeError(error.message || 'Ocurri√≥ un error inesperado.');
                }
            } finally {
                // Siempre restaurar el bot√≥n de env√≠o
                if (submitBtn) {
                    submitBtn.innerHTML = originalBtnText;
                    submitBtn.disabled = false;
                }
                 console.log('‚úÖ Procesamiento del formulario finalizado.');
            }
        });
         console.log("üëç Listener de env√≠o del formulario inicializado.");
    }

    /**
     * Env√≠a los datos de publicidad al endpoint del backend.
     * @param {object} datos - El objeto con los datos estructurados para enviar.
     * @param {string} urlDestino - La URL del endpoint POST /api/publicidad.
     */
    async function enviarPublicidadBackend(datos, urlDestino) {
        try {
            console.log(`üìû Enviando datos a POST ${urlDestino}`);
            const response = await fetch(urlDestino, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json' // Indicar que esperamos JSON
                },
                body: JSON.stringify(datos) // Enviar el objeto como JSON
            });

            // Intentar leer la respuesta JSON incluso si no es OK, puede contener detalles del error
            const responseData = await response.json().catch(() => ({})); // Objeto vac√≠o si falla el parseo

            if (!response.ok) {
                console.error(`Error ${response.status} del backend:`, responseData);
                // Usar el mensaje de error del backend si existe, si no, un mensaje gen√©rico
                const errorMessage = responseData.detail || responseData.message || `Error HTTP ${response.status} al guardar la publicidad.`;
                throw new Error(errorMessage);
            }

            // √âxito en la comunicaci√≥n con el backend
            console.log("‚úÖ Respuesta exitosa del backend:", responseData);
            // La l√≥gica de √©xito (mensaje, cerrar modal) se maneja fuera de esta funci√≥n
            // en el listener del formulario, despu√©s de que esta promesa se resuelva.

        } catch (error) {
            console.error("üö® Error en enviarPublicidadBackend:", error);
            // Relanzar el error para que sea capturado por el listener del formulario
            // y muestre el mensaje de error al usuario.
            throw error;
        }
    }

    // --- Funciones de Mensajes (Base: Versi√≥n 1) ---
    function mostrarMensajeExito(texto = "Operaci√≥n realizada con √©xito.") {
        if (!formularioContainer) return;
        // Remover mensaje previo
        const prevMsg = formularioContainer.querySelector('.mensaje-temporal');
        if(prevMsg) prevMsg.remove();

        const mensajeExito = document.createElement('div');
        mensajeExito.className = 'mensaje-exito mensaje-temporal'; // Clase para estilo y para buscar/remover
        mensajeExito.innerHTML = `<h4>‚úÖ √âxito</h4><p>${texto}</p>`;
        // Aplicar estilos b√°sicos inline (mejor en CSS)
        mensajeExito.style.backgroundColor = '#d4edda';
        mensajeExito.style.color = '#155724';
        mensajeExito.style.border = '1px solid #c3e6cb';
        mensajeExito.style.padding = '1rem';
        mensajeExito.style.margin = '1rem 0';
        mensajeExito.style.borderRadius = '5px';

        // Insertar DESPU√âS del formulario, dentro del contenedor del modal
        formulario?.insertAdjacentElement('afterend', mensajeExito);
        // O a√±adir al final del contenedor si el formulario no existe
        // formularioContainer.appendChild(mensajeExito);

        setTimeout(() => { mensajeExito.remove(); }, 5000); // Auto-cerrar despu√©s de 5 segundos
    }

    function mostrarMensajeError(mensaje = "Error al procesar la solicitud.") {
         if (!formularioContainer) return;
         const prevMsg = formularioContainer.querySelector('.mensaje-temporal');
         if(prevMsg) prevMsg.remove();

        const mensajeError = document.createElement('div');
        mensajeError.className = 'mensaje-error mensaje-temporal';
        mensajeError.innerHTML = `<h4>‚ùå Error</h4><p>${mensaje}</p>`;
        mensajeError.style.backgroundColor = '#f8d7da';
        mensajeError.style.color = '#721c24';
        mensajeError.style.border = '1px solid #f5c6cb';
        mensajeError.style.padding = '1rem';
        mensajeError.style.margin = '1rem 0';
        mensajeError.style.borderRadius = '5px';

        formulario?.insertAdjacentElement('afterend', mensajeError);
        // formularioContainer.appendChild(mensajeError);

        setTimeout(() => { mensajeError.remove(); }, 7000); // Dar un poco m√°s de tiempo para leer errores
    }


    // --- Funciones de Carga y Like de Anuncios (Base: Versi√≥n 1 - ¬°REVISAR URL LIKE!) ---

    /**
     * Carga los anuncios aprobados desde el backend y los muestra.
     */
    async function cargarAnuncios() {
        console.log(`üìû Cargando anuncios desde GET ${backendApiUrl}...`);
        if (!anunciosContainer) {
             console.error("‚ùå No se encontr√≥ el contenedor '.anuncios-container'. No se pueden mostrar anuncios.");
             return;
        }
        if (!backendApiUrl) {
            anunciosContainer.innerHTML = '<p class="error-mensaje">Error: URL del backend no configurada para cargar anuncios.</p>';
            return;
        }

        anunciosContainer.innerHTML = `<p class="cargando-mensaje"><i class="fas fa-spinner fa-spin"></i> Cargando anuncios...</p>`; // Feedback visual

        try {
            const response = await fetch(backendApiUrl); // GET /api/publicidad
            if (!response.ok) {
                throw new Error(`Error HTTP ${response.status} al obtener anuncios.`);
            }
            const data = await response.json();

            // Asumiendo que la respuesta es { anuncios: [...] } o similar
            const anuncios = data.anuncios || (Array.isArray(data) ? data : []); // Ser flexible con la respuesta

            // Filtrar para mostrar solo los aprobados
            const anunciosAprobados = anuncios.filter(a => a.aprobado === true);
            console.log(`‚úÖ Anuncios recibidos: ${anuncios.length} total, ${anunciosAprobados.length} aprobados.`);

            actualizarVistaAnuncios(anunciosAprobados);

        } catch (error) {
            console.error("üö® Error al cargar anuncios:", error);
            anunciosContainer.innerHTML = `<p class="error-mensaje">‚ö†Ô∏è No se pudieron cargar los anuncios. Intenta recargar la p√°gina.</p>`;
        }
    }

    /**
     * Renderiza los anuncios aprobados en el contenedor HTML.
     * @param {Array} anunciosAprobados - Array de objetos de anuncio aprobados.
     */
    function actualizarVistaAnuncios(anunciosAprobados) {
        if (!anunciosContainer) return;

        if (!anunciosAprobados || anunciosAprobados.length === 0) {
            anunciosContainer.innerHTML = `<p class="info-mensaje">‚ú® De momento no hay anuncios publicados. ¬°S√© el primero en registrar uno! ‚ú®</p>`;
            return;
        }

        // Generar HTML para cada anuncio
        anunciosContainer.innerHTML = anunciosAprobados.map(anuncio => {
            // Proporcionar valores por defecto si alguna propiedad falta
            const id = anuncio.id || `temp_${Math.random().toString(36).substring(2)}`;
            const imagenSrc = anuncio.imagen_base64 || 'images/placeholder-anuncio.png'; // Placeholder local
            const titulo = anuncio.titulo || 'Anuncio';
            const descripcion = anuncio.descripcion || 'Sin descripci√≥n.';
            const categoria = anuncio.categoria || 'General';
            const likes = anuncio.likes || 0;

            return `
            <div class="anuncio-card" data-id="${id}">
                <img src="${imagenSrc}" alt="Imagen de ${titulo}" class="anuncio-imagen" onerror="this.onerror=null; this.src='images/placeholder-anuncio.png';">
                <div class="anuncio-content">
                    <h3>${titulo}</h3>
                    <p>${descripcion}</p>
                    <div class="anuncio-footer">
                        <span class="categoria"><i class="fas fa-tag"></i> ${categoria}</span>
                        <button class="like-button" data-anuncio-id="${id}" title="Me gusta">
                            <i class="fas fa-thumbs-up"></i>
                            <span class="likes-count">${likes}</span>
                        </button>
                    </div>
                </div>
            </div>
        `;
        }).join('');

        // A√±adir listeners a los botones de like DESPU√âS de crear el HTML
        setupLikeButtonListeners();
    }

    /**
     * A√±ade event listeners a todos los botones de like presentes en la p√°gina.
     */
    function setupLikeButtonListeners() {
        const likeButtons = document.querySelectorAll('.like-button');
        likeButtons.forEach(button => {
            // Remover listener previo si existiera (por si se llama varias veces)
            button.replaceWith(button.cloneNode(true));
        });
        // Volver a seleccionar los botones clonados y a√±adir listener
        document.querySelectorAll('.like-button').forEach(button => {
             button.addEventListener('click', handleLikeClick);
        });
    }

    /**
     * Manejador de evento para el clic en el bot√≥n de like.
     */
    async function handleLikeClick(event) {
        const button = event.currentTarget;
        const anuncioId = button.dataset.anuncioId; // Obtener ID desde data-attribute
        if (!anuncioId) {
            console.error("‚ùå No se encontr√≥ anuncioId en el bot√≥n de like.");
            return;
        }
        await darLike(anuncioId); // Llamar a la funci√≥n que interact√∫a con el backend
    }


    /**
     * Env√≠a una solicitud para dar "like" a un anuncio.
     * ¬°¬°¬° ADVERTENCIA: LA URL USADA AQU√ç ES PROBABLEMENTE INCORRECTA !!!
     * Deber√≠a usar un endpoint espec√≠fico para likes, ej: /api/like/{anuncioId}
     * @param {string} anuncioId - El ID del anuncio al que dar like.
     */
    async function darLike(anuncioId) {
        // --- !! ALERTA DE CONFIGURACI√ìN !! ---
        // Esta URL probablemente est√° mal. Necesitas un endpoint POST /api/like/{id}
        // const urlLikeCorrecta = `${window.API_ENDPOINTS?.like}/${anuncioId}`; // Ejemplo de c√≥mo podr√≠a ser
        const urlLikeIncorrecta = `${backendApiUrl}/like/${anuncioId}`; // URL incorrecta usada en v1
        const likeEndpoint = window.API_ENDPOINTS?.like; // Intentar obtener endpoint de like
        const urlLike = likeEndpoint ? `${likeEndpoint}/${anuncioId}` : null;

        if (!urlLike) {
             console.warn(`‚ö†Ô∏è Funcionalidad 'Like' deshabilitada: window.API_ENDPOINTS.like no est√° definido en config.js.`);
             alert("La funci√≥n de 'Me gusta' no est√° configurada correctamente.");
             return; // Detener si no hay URL correcta
        }
        console.log(`üëç Intentando dar like a ${anuncioId} en ${urlLike}`);


        const button = document.querySelector(`.like-button[data-anuncio-id="${anuncioId}"]`);
        const likesCountSpan = button?.querySelector('.likes-count');
        if (!button || !likesCountSpan) {
            console.error(`‚ùå No se encontr√≥ el bot√≥n o contador de likes para el anuncio ${anuncioId}`);
            return;
        }

        const originalButtonState = button.innerHTML;
        button.disabled = true;
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

        try {
            const response = await fetch(urlLike, { // Usar la URL correcta (si est√° definida)
                method: 'POST',
                headers: {
                    // 'Content-Type': 'application/json', // No necesario si no hay body
                    'Accept': 'application/json'
                }
                // body: JSON.stringify({ userId: '...' }) // Si necesitas enviar qui√©n dio like
            });

            const data = await response.json().catch(() => ({}));

            if (!response.ok) {
                throw new Error(data.detail || data.message || `Error ${response.status} al dar like.`);
            }

            // √âxito - Actualizar contador y feedback visual
            likesCountSpan.textContent = data.likes !== undefined ? data.likes : parseInt(likesCountSpan.textContent || '0') + 1; // Actualizar contador
            button.classList.add('liked-animation'); // A√±adir clase para animaci√≥n CSS

            console.log(`‚úÖ Like registrado para ${anuncioId}. Nueva cuenta: ${likesCountSpan.textContent}`);

            // Quitar animaci√≥n y restaurar bot√≥n despu√©s de un tiempo
            setTimeout(() => {
                button.classList.remove('liked-animation');
                // Restaurar icono y contador (ya actualizado)
                button.innerHTML = `<i class="fas fa-thumbs-up"></i> <span class="likes-count">${likesCountSpan.textContent}</span>`;
                button.disabled = false;
            }, 1000); // Duraci√≥n de la animaci√≥n

        } catch (error) {
            console.error(`üö® Error al dar like al anuncio ${anuncioId}:`, error);
            alert(`No se pudo registrar el 'Me gusta'. ${error.message}`);
            // Restaurar bot√≥n a su estado original en caso de error
            button.innerHTML = originalButtonState;
            button.disabled = false;
        }
    }


    // --- Inicializaci√≥n de la P√°gina y Listeners Globales ---

    function initPage() {
        console.log("üöÄ Inicializando p√°gina de publicidad (Versi√≥n Fusionada)...");
        // Aplicar fade-in al cargar (si se usa CSS para ello)
        document.body.classList.add('fade-in'); // Asegurar que est√© visible

        // Slider: Mostrar el primer slide y configurar navegaci√≥n
        if(slides.length > 0) {
            updateSlide(0); // Mostrar slide inicial
            setupSliderNavListeners(); // Configurar botones y enlaces
        } else {
            console.warn(" M√≥dulo Slider no inicializado: no se encontraron slides.");
        }

        // Formulario: Configurar listeners de env√≠o y botones de email
        inicializarFormularioPublicidad();
        configurarBotonesEmail(); // Configurar inicialmente

        // Modal: Configurar botones de cierre
        setupModalCloseListeners();

        // Autenticaci√≥n: Configurar el bot√≥n de registro basado en localStorage
        configurarBotonRegistro();

        // Anuncios: Cargar los anuncios existentes del backend
        cargarAnuncios();

        console.log("üëç P√°gina de publicidad inicializada.");
    }

    // Listener para cambios en localStorage (ej: login/logout en otra pesta√±a)
    window.addEventListener('storage', function(e) {
        // Reaccionar si cambia el estado de afiliado, perfil o datos relevantes
        if (e.key === 'afiliado' || e.key === 'nombre' || e.key === 'perfil_completo' || e.key === 'email') {
            console.log(`üì£ Storage cambi√≥ ('${e.key}'). Reconfigurando componentes...`);
            configurarBotonRegistro(); // Actualizar estado del bot√≥n principal
            // Si el modal est√° abierto, podr√≠amos querer actualizar los botones de email
            if (formularioContainer?.style.display === 'block') {
                 configurarBotonesEmail(); // Reconfigurar botones de email dentro del modal
            }
        }
    });

    // Exponer funciones globalmente SOLO si son necesarias desde fuera (ej: onclick en HTML o desde otros scripts)
    // 'darLike' ya no necesita ser global porque usamos addEventListener
    // window.darLike = darLike; // Ya no es necesario con setupLikeButtonListeners
    window.configurarBotonRegistro = configurarBotonRegistro; // Necesario para auth-popup.js u otros
    // window.updatePublicidadSliderDots = updateSliderDots; // No parece necesario globalmente

    // --- Ejecuci√≥n Inicial ---
    initPage();

}); // Fin de DOMContentLoaded

// --- Funciones Globales (Evitar si es posible) ---
// La funci√≥n limpiarFormulario est√° ahora definida DENTRO de DOMContentLoaded,
// lo cual es mejor pr√°ctica. Si alguna parte externa la necesitaba globalmente,
// tendr√≠a que ser expuesta expl√≠citamente (ej: window.limpiarFormularioPublicidad = limpiarFormulario;)
// pero es preferible refactorizar para no depender de globales.
// Ya no definimos limpiarFormularioGlobal() aqu√≠.

// Exponer la funci√≥n de verificaci√≥n globalmente
window.verificarCedulaPublicidad = async function(cedula, callback) {
    try {
        // Determinar la URL base del API seg√∫n el ambiente
        let backendUrl;
        if (window.API_ENDPOINTS?.verificarCedula) {
            backendUrl = window.API_ENDPOINTS.verificarCedula;
        } else {
            // Si estamos en producci√≥n, usar la URL de producci√≥n
            backendUrl = window.location.hostname === 'localhost' 
                ? "http://localhost:8000/api/verificar_cedula"
                : "https://tudominio.com/api/verificar_cedula"; // Reemplaza con tu URL de producci√≥n
        }
        
        const url = `${backendUrl}/${cedula}`;
        console.log("üîç Intentando verificar c√©dula en:", url);

        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            credentials: 'include' // Incluir cookies si es necesario
        });

        // Verificar el tipo de contenido antes de intentar parsear JSON
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            console.error('Respuesta no es JSON:', contentType);
            console.error('URL utilizada:', url);
            throw new Error('El servidor no respondi√≥ con JSON v√°lido');
        }

        if (!response.ok) {
            throw new Error(`Error HTTP ${response.status}`);
        }

        const data = await response.json();
        console.log("‚úÖ Respuesta del servidor:", data);

        // Guardar datos en localStorage
        if (data.valid) {
            localStorage.setItem("afiliado", "yes");
            localStorage.setItem("nombre", data.nombre);
            localStorage.setItem("cargo", data.cargo);
            localStorage.setItem("codigo_secreto", data.codigo_secreto);
        } else {
            localStorage.setItem("afiliado", "no");
        }

        // Ejecutar el callback con el resultado
        if (callback) {
            callback(data);
        }

        return data;
    } catch (error) {
        console.error("‚ùå Error al verificar c√©dula:", error);
        console.error("URL completa:", url);
        console.error("Ambiente:", window.location.hostname);
        
        if (callback) {
            callback({ 
                valid: false, 
                error: error.message,
                details: "Error de conexi√≥n con el servidor. Por favor, intente m√°s tarde."
            });
        }
        throw error;
    }
};

